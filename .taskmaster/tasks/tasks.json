{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up Development Environment",
        "description": "Set up the development environment for Google Apps Script.",
        "details": "Create a new Google Apps Script project. Configure the project settings, including the name and any necessary libraries. Set up version control (e.g., using Apps Script's built-in versioning or integrating with a Git repository).",
        "testStrategy": "Verify that the development environment is correctly set up by creating a simple 'Hello, World!' script and running it successfully.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Testing Framework",
        "description": "Create a testing framework for the Google Apps Script project.",
        "details": "Choose a testing framework compatible with Google Apps Script (e.g., clasp-test, Jest with clasp). Set up the framework to allow for unit and integration tests. Configure the testing environment to interact with Google Sheets.",
        "testStrategy": "Write and run a basic unit test to confirm the testing framework is working correctly. Ensure tests can interact with Google Sheets data.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Establish Code Review Process",
        "description": "Establish a code review process for the project.",
        "details": "Define the code review process, including the tools and guidelines for code reviews. Set up a system for code review, such as using pull requests in a Git repository or the built-in Apps Script review features. Document the code review process.",
        "testStrategy": "Conduct a code review on a small code change to ensure the process is working as expected. Verify that the review process catches potential issues.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Set up CI/CD Pipeline",
        "description": "Set up a CI/CD pipeline for the project.",
        "details": "Choose a CI/CD tool compatible with Google Apps Script (e.g., GitHub Actions, GitLab CI). Configure the pipeline to automatically build, test, and deploy the application. Set up triggers for the pipeline, such as code pushes or pull requests.",
        "testStrategy": "Test the CI/CD pipeline by making a small code change and verifying that the build, test, and deployment processes are executed successfully.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create Staging Environment",
        "description": "Create a staging environment for testing.",
        "details": "Set up a separate Google Apps Script project or environment for staging. Configure the staging environment to mirror the production environment. Ensure that the staging environment can be used for testing new features and bug fixes before deployment to production.",
        "testStrategy": "Deploy a simple change to the staging environment and verify that it functions as expected. Test the staging environment's ability to handle data and user interactions.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Document Current System",
        "description": "Document the current system.",
        "details": "Create documentation for the existing system, including the architecture, data flow, and key functionalities. Document the Google Sheets database schema and the Apps Script code. Use JSDoc for code documentation.",
        "testStrategy": "Review the documentation to ensure it accurately reflects the current system. Verify that the documentation is clear and easy to understand.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Backup Current Data",
        "description": "Back up the current data.",
        "details": "Create a backup of the existing data in Google Sheets. Implement a regular backup schedule to prevent data loss. Store the backups securely.",
        "testStrategy": "Verify that the backup process is working correctly by restoring the data to a test environment. Ensure that the restored data is accurate.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Plan Rollback Strategy",
        "description": "Plan a rollback strategy.",
        "details": "Develop a rollback strategy in case of deployment issues. Document the steps to revert to the previous version of the application and data. Test the rollback strategy.",
        "testStrategy": "Test the rollback strategy by simulating a deployment failure and verifying that the rollback process works as expected.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Progressive Loading",
        "description": "Implement progressive loading to optimize performance.",
        "details": "Load data in chunks instead of loading the entire dataset at once. Implement pagination or infinite scrolling to load data as the user scrolls. Use the Google Sheets API to fetch data in batches.",
        "testStrategy": "Verify that the application loads data faster with progressive loading. Test the performance with large datasets.",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Lazy Loading",
        "description": "Implement lazy loading to improve performance.",
        "details": "Only render the rows within the viewport. Use Intersection Observer API to detect when elements enter the viewport and render them accordingly.",
        "testStrategy": "Verify that only visible rows are rendered initially. Test the performance with large datasets and different screen sizes.",
        "priority": "high",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Virtual Scrolling",
        "description": "Implement virtual scrolling for large timelines.",
        "details": "Use virtual scrolling to render only the visible portion of the timeline. Calculate the height of the scrollable area and the height of each item. Use CSS transforms to move the visible items.",
        "testStrategy": "Verify that the timeline scrolls smoothly with a large number of companies. Test the performance with different screen sizes.",
        "priority": "high",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Optimize Cache Strategy",
        "description": "Optimize the cache strategy.",
        "details": "Increase the cache duration. Implement user-specific caching. Use local storage or session storage to cache data. Use the Google Apps Script cache service.",
        "testStrategy": "Verify that the application loads faster with the optimized cache strategy. Test the cache invalidation process.",
        "priority": "high",
        "dependencies": [
          9,
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Minimize DOM Manipulation",
        "description": "Minimize DOM manipulation.",
        "details": "Use DocumentFragment when rendering multiple elements. Reduce the number of DOM updates. Use efficient methods for updating the DOM.",
        "testStrategy": "Verify that the application's performance improves with minimized DOM manipulation. Use browser developer tools to analyze DOM updates.",
        "priority": "high",
        "dependencies": [
          9,
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement Dark Mode Toggle",
        "description": "Add a dark mode toggle.",
        "details": "Implement a toggle switch to enable dark mode. Create a separate color scheme for dark mode. Store the user's preference in local storage.",
        "testStrategy": "Verify that the dark mode toggle works correctly and that the color scheme changes as expected.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Skeleton Loading",
        "description": "Implement skeleton loading.",
        "details": "Replace spinners with skeleton placeholders while data is loading. Use CSS to create skeleton placeholders. Implement skeleton placeholders for different UI elements.",
        "testStrategy": "Verify that skeleton placeholders are displayed while data is loading. Test the loading experience with different data loading times.",
        "priority": "high",
        "dependencies": [
          9,
          10,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Add Smooth Transitions",
        "description": "Add smooth transitions.",
        "details": "Add animations for navigation and filters. Use CSS transitions and animations. Ensure smooth transitions between different states.",
        "testStrategy": "Verify that the transitions are smooth and visually appealing. Test the transitions on different devices and browsers.",
        "priority": "high",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Improve Sticky Header Behavior",
        "description": "Improve sticky header behavior.",
        "details": "Improve the behavior of the sticky header when scrolling. Ensure that the header remains visible and responsive. Optimize the performance of the sticky header.",
        "testStrategy": "Verify that the sticky header behaves correctly on different screen sizes and scrolling speeds.",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Mobile Navigation",
        "description": "Redesign the navigation for mobile devices.",
        "details": "Implement a drawer navigation for mobile devices. Optimize the navigation for touch interactions. Ensure that the navigation is responsive and easy to use.",
        "testStrategy": "Verify that the mobile navigation is responsive and easy to use. Test the navigation on different mobile devices.",
        "priority": "high",
        "dependencies": [
          14,
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Add ARIA Labels",
        "description": "Add ARIA labels.",
        "details": "Add accessibility attributes to UI elements for screen readers. Use ARIA attributes to provide information about the elements. Ensure that all UI elements are accessible.",
        "testStrategy": "Verify that screen readers can correctly interpret the UI elements. Test the application with different screen readers.",
        "priority": "high",
        "dependencies": [
          14,
          16,
          17,
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement Keyboard Navigation",
        "description": "Implement keyboard navigation.",
        "details": "Enable tab navigation for all UI elements. Ensure that users can navigate the UI using the keyboard. Implement focus management for all interactive elements.",
        "testStrategy": "Verify that users can navigate the UI using the keyboard. Test the keyboard navigation on different browsers.",
        "priority": "high",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Manage Focus",
        "description": "Manage focus when opening and closing modals.",
        "details": "Manage focus when opening and closing modals. Ensure that focus is correctly set on the modal elements. Return focus to the triggering element when the modal is closed.",
        "testStrategy": "Verify that focus is correctly managed when opening and closing modals. Test the focus management on different browsers.",
        "priority": "high",
        "dependencies": [
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Ensure Color Contrast Compliance",
        "description": "Ensure WCAG 2.1 AA compliance.",
        "details": "Ensure that the application meets WCAG 2.1 AA standards. Use color contrast checkers to ensure sufficient contrast. Provide alternative text for images.",
        "testStrategy": "Use accessibility testing tools to verify WCAG 2.1 AA compliance. Manually test the application with different users.",
        "priority": "high",
        "dependencies": [
          14,
          19,
          20,
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Support Text Scaling",
        "description": "Support text scaling.",
        "details": "Ensure that the application supports zoom up to 200% without breaking the layout. Use relative units for font sizes and spacing. Test the application with different zoom levels.",
        "testStrategy": "Verify that the layout remains intact when zooming up to 200%. Test the application on different browsers.",
        "priority": "high",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Multi-select Filters",
        "description": "Implement multi-select filters.",
        "details": "Allow users to select multiple employees and statuses simultaneously. Implement a UI for selecting multiple options. Update the data filtering logic.",
        "testStrategy": "Verify that users can select multiple options and that the filtering works correctly.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Implement Date Range Picker",
        "description": "Implement a date range picker.",
        "details": "Allow users to filter by a custom date range. Integrate a date range picker component. Update the data filtering logic.",
        "testStrategy": "Verify that users can select a custom date range and that the filtering works correctly.",
        "priority": "medium",
        "dependencies": [
          24
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Implement Advanced Search",
        "description": "Implement advanced search functionality.",
        "details": "Allow users to search using regular expressions and wildcard patterns. Implement a search input field. Update the data filtering logic.",
        "testStrategy": "Verify that users can search using regular expressions and wildcard patterns and that the search results are accurate.",
        "priority": "medium",
        "dependencies": [
          24
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Implement Saved Filters",
        "description": "Implement saved filters.",
        "details": "Allow users to save and load frequently used filter combinations. Implement a UI for saving and loading filters. Store the filter configurations.",
        "testStrategy": "Verify that users can save and load filters and that the filters are applied correctly.",
        "priority": "medium",
        "dependencies": [
          24,
          25,
          26
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Implement Quick Filters",
        "description": "Implement quick filter buttons.",
        "details": "Provide preset buttons for common filter options (e.g., today, this week, this month). Implement buttons for quick filtering. Update the data filtering logic.",
        "testStrategy": "Verify that the quick filter buttons work correctly and that the filters are applied correctly.",
        "priority": "medium",
        "dependencies": [
          24,
          25,
          26,
          27
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Integrate Charts",
        "description": "Integrate charts to visualize data trends.",
        "details": "Integrate charting libraries (e.g., Chart.js, D3.js). Display trends and patterns in the data. Create charts for different data visualizations.",
        "testStrategy": "Verify that the charts display the data correctly. Test the charts with different data sets.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Implement Calendar View",
        "description": "Implement a calendar view.",
        "details": "Allow users to view the schedule in a calendar format. Implement a calendar component. Display the schedule events in the calendar.",
        "testStrategy": "Verify that the calendar view displays the schedule correctly. Test the calendar view with different data sets.",
        "priority": "medium",
        "dependencies": [
          29
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 31,
        "title": "Implement Heatmap View",
        "description": "Implement a heatmap view.",
        "details": "Display the schedule data in a heatmap format. Use color-coding to represent the density of events. Implement a heatmap component.",
        "testStrategy": "Verify that the heatmap view displays the data correctly. Test the heatmap view with different data sets.",
        "priority": "medium",
        "dependencies": [
          29
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 32,
        "title": "Create Statistics Dashboard",
        "description": "Create a statistics dashboard.",
        "details": "Create a dedicated page for displaying statistics and charts. Display key performance indicators (KPIs). Implement a dashboard layout.",
        "testStrategy": "Verify that the statistics dashboard displays the correct data. Test the dashboard with different data sets.",
        "priority": "medium",
        "dependencies": [
          29
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Enable Chart Export",
        "description": "Enable chart export.",
        "details": "Allow users to export charts as PNG or PDF files. Implement export functionality. Integrate with a library for chart export.",
        "testStrategy": "Verify that charts can be exported correctly. Test the export functionality with different chart types.",
        "priority": "medium",
        "dependencies": [
          29
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Implement Bulk Edit",
        "description": "Implement bulk edit functionality.",
        "details": "Allow users to edit multiple records simultaneously. Implement a UI for bulk editing. Update the data in Google Sheets.",
        "testStrategy": "Verify that users can bulk edit records correctly. Test the bulk edit functionality with different data sets.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 35,
        "title": "Implement Data Import/Export",
        "description": "Implement data import/export functionality.",
        "details": "Allow users to import data from Excel and export data in various formats. Implement import and export functionality. Integrate with Google Sheets API.",
        "testStrategy": "Verify that data can be imported and exported correctly. Test the import and export functionality with different file formats.",
        "priority": "medium",
        "dependencies": [
          34
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 36,
        "title": "Implement Backup & Restore",
        "description": "Implement backup and restore functionality.",
        "details": "Implement automatic data backups. Implement a restore functionality. Store backups securely.",
        "testStrategy": "Verify that data can be backed up and restored correctly. Test the backup and restore functionality.",
        "priority": "medium",
        "dependencies": [
          35
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 37,
        "title": "Implement Data Validation",
        "description": "Implement data validation.",
        "details": "Validate data when entering or importing. Implement data validation rules. Display validation errors.",
        "testStrategy": "Verify that data validation works correctly. Test the data validation with different data inputs.",
        "priority": "medium",
        "dependencies": [
          35
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 38,
        "title": "Implement Change History",
        "description": "Implement change history tracking.",
        "details": "Track and display the history of changes made to the data. Implement a change history log. Display the change history in the UI.",
        "testStrategy": "Verify that the change history is tracked and displayed correctly. Test the change history with different data changes.",
        "priority": "medium",
        "dependencies": [
          34,
          35,
          36,
          37
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 39,
        "title": "Modularize Code",
        "description": "Modularize the code.",
        "details": "Split the `Code.gs` file into multiple modules. Organize the code into logical units. Improve code maintainability.",
        "testStrategy": "Verify that the application functions correctly after modularization. Test the application with different modules.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 40,
        "title": "Migrate to TypeScript",
        "description": "Migrate to TypeScript.",
        "details": "Convert the code to TypeScript for type safety. Use TypeScript to improve code quality. Configure the TypeScript compiler.",
        "testStrategy": "Verify that the application functions correctly after the migration to TypeScript. Test the application with different TypeScript features.",
        "priority": "high",
        "dependencies": [
          39
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 41,
        "title": "Implement Error Handling",
        "description": "Implement comprehensive error handling.",
        "details": "Implement error handling with retry logic. Handle different types of errors. Log errors for debugging.",
        "testStrategy": "Verify that the error handling works correctly. Test the error handling with different error scenarios.",
        "priority": "high",
        "dependencies": [
          39,
          40
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 42,
        "title": "Write Unit Tests",
        "description": "Write unit tests for core logic.",
        "details": "Write unit tests for all core logic functions. Ensure high test coverage. Use the testing framework.",
        "testStrategy": "Verify that the unit tests cover all core logic functions. Run the unit tests regularly.",
        "priority": "high",
        "dependencies": [
          40,
          41
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 43,
        "title": "Document Functions",
        "description": "Document all functions using JSDoc.",
        "details": "Use JSDoc to document all functions. Provide clear and concise documentation. Generate documentation automatically.",
        "testStrategy": "Verify that the documentation is accurate and complete. Review the generated documentation.",
        "priority": "medium",
        "dependencies": [
          39,
          40,
          41,
          42
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 44,
        "title": "Optimize Database Queries",
        "description": "Optimize database queries.",
        "details": "Optimize queries with the Google Sheets API. Use efficient query methods. Reduce the number of API calls.",
        "testStrategy": "Verify that the application's performance improves with optimized queries. Test the application with large datasets.",
        "priority": "high",
        "dependencies": [
          39,
          40,
          41,
          42,
          43
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 45,
        "title": "Implement Caching Strategy",
        "description": "Implement multi-level caching.",
        "details": "Implement caching using memory, local storage, and server-side caching. Use the Google Apps Script cache service. Implement cache invalidation.",
        "testStrategy": "Verify that the application loads faster with multi-level caching. Test the cache invalidation process.",
        "priority": "high",
        "dependencies": [
          44
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 46,
        "title": "Optimize Images",
        "description": "Optimize images and lazy load them.",
        "details": "Optimize image assets. Lazy load images to improve performance. Use appropriate image formats.",
        "testStrategy": "Verify that the application loads faster with optimized images. Test the image loading on different devices.",
        "priority": "high",
        "dependencies": [
          45
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 47,
        "title": "Minify CSS/JS",
        "description": "Minify CSS/JS and remove unused code.",
        "details": "Minify CSS and JavaScript files. Remove unused code to reduce bundle size. Use a minification tool.",
        "testStrategy": "Verify that the application's bundle size is reduced. Test the application's performance after minification.",
        "priority": "high",
        "dependencies": [
          45,
          46
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 48,
        "title": "Integrate CDN",
        "description": "Integrate a CDN for static assets.",
        "details": "Use a CDN to serve static assets. Configure the CDN to cache assets. Improve the application's loading speed.",
        "testStrategy": "Verify that the application loads faster with CDN integration. Test the application's performance from different locations.",
        "priority": "high",
        "dependencies": [
          47
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 49,
        "title": "Sanitize Inputs",
        "description": "Sanitize user inputs.",
        "details": "Sanitize user inputs to prevent injection attacks. Use appropriate sanitization methods. Validate user inputs.",
        "testStrategy": "Verify that the application is protected against injection attacks. Test the application with malicious inputs.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 50,
        "title": "Implement Rate Limiting",
        "description": "Implement rate limiting for API calls.",
        "details": "Implement rate limiting to protect against abuse. Limit the number of API calls per user. Use a rate limiting library.",
        "testStrategy": "Verify that the rate limiting is working correctly. Test the application with different API call rates.",
        "priority": "high",
        "dependencies": [
          49
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 51,
        "title": "Integrate Error Tracking",
        "description": "Integrate error tracking.",
        "details": "Integrate error tracking with Sentry. Monitor application errors. Track and analyze errors.",
        "testStrategy": "Verify that errors are correctly tracked and reported. Test the error tracking with different error scenarios.",
        "priority": "high",
        "dependencies": [
          41
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 52,
        "title": "Encrypt Data",
        "description": "Encrypt sensitive data.",
        "details": "Encrypt sensitive data in Google Sheets. Use encryption methods to protect data. Securely store encryption keys.",
        "testStrategy": "Verify that sensitive data is encrypted correctly. Test the encryption and decryption processes.",
        "priority": "high",
        "dependencies": [
          49
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 53,
        "title": "Implement Access Control",
        "description": "Implement role-based permissions.",
        "details": "Implement role-based permissions. Define different user roles. Control access to different features based on user roles.",
        "testStrategy": "Verify that the role-based permissions are working correctly. Test the application with different user roles.",
        "priority": "high",
        "dependencies": [
          49
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 54,
        "title": "Implement Mobile-First Design",
        "description": "Redesign the application for mobile-first design.",
        "details": "Redesign the application with a mobile-first approach. Optimize the layout for mobile devices. Ensure that the application is responsive.",
        "testStrategy": "Verify that the application is responsive and functions correctly on different mobile devices.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-04T06:32:05.740Z",
      "updated": "2025-07-04T06:32:05.740Z",
      "description": "Tasks for master context"
    }
  },
  "vietnamese-tasks": {
    "tasks": [],
    "metadata": {
      "created": "2025-07-04T06:37:21.229Z",
      "updated": "2025-07-04T06:37:21.229Z",
      "description": "Tasks parsed from the Vietnamese tasks.txt file for the HMSG CHC health check scheduling system"
    }
  }
}